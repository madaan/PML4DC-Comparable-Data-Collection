"""Creates a dictionary from fast-align file
"""

import sys
import pandas as pd
from collections import defaultdict


def parse(fastalign_input_file_path, alignment_file_path):
    """Calculates token level alignment given:
    a) Path to a file that contains the input to fastalign. 
    The file is supposed to be in "src ||| target" format. E.g.:
    एक लड़की समुद्र के पानी में खेल रही है ||| A girl in pigtails splashes in the shallow water .

    b) Path to an alignment file generated by fasttext 
    0-0 1-1 3-2 2-3 4-4 5-5 5-6 4-7 4-8 8-9
    Arguments:
        fastalign_input_file_path {str} -- [Path to fasttext input]
        alignment_file_path {str}       -- [Alignment file generated by fasttext]
        outpath {str}                   -- [Path to the output file]

    Returns:
        A dataframe with the following columns:
            Hindi word
            English word
            Joint Count (#times the words appear together)
            Hindi only count (#times the Hindi word appears on its own)
            English only count (#times the English word appears on its own)
    """
    hi_counts = defaultdict(int)
    en_counts = defaultdict(int)
    joint_counts = defaultdict(int)
    with open(fastalign_input_file_path, "r") as fin, open(alignment_file_path, "r") as falign:
        for input_line, alignment_line in zip(fin, falign):
            hin, en = input_line.split("|||")
            hin, en = hin.strip().split(), en.strip().split()
            alignments = parse_alignment(alignment_line)
            for hi_idx, en_idx in alignments.items():
                hi_counts[hin[hi_idx]] += 1
                en_counts[en[en_idx]] += 1
                joint_counts[(hin[hi_idx], en[en_idx])] += 1
    rows = []
    for ((hi, en), joint_count) in joint_counts.items():
        rows.append({
            "hi": hi,
            "en": en,
            "joint_count": joint_count,
            "hi_count": hi_counts[hi],
            "en_count": en_counts[en],
        })
    return pd.DataFrame(rows)


def parse_alignment(alignment_line):
    """Given an alignment line in the format x1-y1 x2-y2, ... xN-yN,
    returns a map of the form x_i -> y_i.
    E.g. 
    Input
        0-0 1-1 3-2 2-3 4-4 5-5 5-6 4-7 4-8 8-9
    Output
        {
            0: 0,
            1: 1,
            3: 2,...,
            8:9
        }
    Arguments:
        alignment_line {str} -- 
        returned by fastalign
    """
    token_alignments = alignment_line.split()
    res = {}
    for tok_alignment in token_alignments:
        tok_alignment = tok_alignment.split("-")
        res[int(tok_alignment[0])] = int(tok_alignment[1])
    return res


if __name__ == '__main__':
    token_alignments = parse(
        fastalign_input_file_path=sys.argv[1], alignment_file_path=sys.argv[2])
    token_alignments.to_csv(sys.argv[3], index=None, sep="\t")
